{"paragraphs":[{"text":"%pyspark\nfrom pyspark.sql.types import *\n\ntruckPositionSchema = StructType().add(\"timestamp\", TimestampType()).add(\"truckId\",LongType()).add(\"driverId\", LongType()).add(\"routeId\", LongType()).add(\"eventType\", StringType()).add(\"latitude\", DoubleType()).add(\"longitude\", DoubleType()).add(\"correlationId\", StringType()) ","user":"admin","dateUpdated":"2020-06-22T20:51:39+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592857169919_-1507085984","id":"20200622-190601_66289715","dateCreated":"2020-06-22T20:19:29+0000","dateStarted":"2020-06-22T20:19:41+0000","dateFinished":"2020-06-22T20:19:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:30286","title":"Define Schema for truck_position events/messages"},{"text":"%pyspark\nrawDf = spark.readStream.format(\"kafka\").option(\"kafka.bootstrap.servers\", \"kafka-1:19092,kafka-2:19093\").option(\"subscribe\", \"truck_position\").load()","user":"admin","dateUpdated":"2020-06-22T20:52:13+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592857169921_-1315910706","id":"20200622-190615_61992796","dateCreated":"2020-06-22T20:19:29+0000","dateStarted":"2020-06-22T20:19:44+0000","dateFinished":"2020-06-22T20:19:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30287","title":"Kafka Consumer"},{"text":"%pyspark\nrawDf.printSchema","user":"admin","dateUpdated":"2020-06-22T20:52:17+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<bound method DataFrame.printSchema of DataFrame[key: binary, value: binary, topic: string, partition: int, offset: bigint, timestamp: timestamp, timestampType: int]>\n"}]},"apps":[],"jobName":"paragraph_1592857169922_-1637984309","id":"20200622-191106_1841270663","dateCreated":"2020-06-22T20:19:29+0000","dateStarted":"2020-06-22T20:19:47+0000","dateFinished":"2020-06-22T20:19:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30288","title":"Show the schema of the raw Kafka message"},{"text":"%pyspark\nfrom pyspark.sql.functions import from_json\n\njsonDf = rawDf.selectExpr(\"CAST(value AS string)\")\njsonDf = jsonDf.select(from_json(jsonDf.value, truckPositionSchema).alias(\"json\")).selectExpr(\"json.*\", \"cast(cast (json.timestamp as double) / 1000 as timestamp) as eventTime\")\n","user":"admin","dateUpdated":"2020-06-22T20:53:03+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592857169923_831209256","id":"20200622-191517_1463825319","dateCreated":"2020-06-22T20:19:29+0000","dateStarted":"2020-06-22T20:30:34+0000","dateFinished":"2020-06-22T20:30:34+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30289","title":"Map to \"truck_position\" schema and extract event time (trunc to seconds)   "},{"text":"%pyspark\njsonDf.printSchema","user":"admin","dateUpdated":"2020-06-22T20:54:29+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<bound method DataFrame.printSchema of DataFrame[timestamp: timestamp, truckId: bigint, driverId: bigint, routeId: bigint, eventType: string, latitude: double, longitude: double, correlationId: string, eventTime: timestamp]>\n"}]},"apps":[],"jobName":"paragraph_1592857169923_2071532018","id":"20200622-191529_962524804","dateCreated":"2020-06-22T20:19:29+0000","dateStarted":"2020-06-22T20:30:39+0000","dateFinished":"2020-06-22T20:30:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30290","title":"Show schema of Data Frame"},{"text":"%pyspark\nquery1 = jsonDf.writeStream.format(\"memory\").queryName(\"filtered_truck_position\").start()","user":"admin","dateUpdated":"2020-06-22T20:55:00+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592857519705_-293816114","id":"20200622-202519_1269523671","dateCreated":"2020-06-22T20:25:19+0000","dateStarted":"2020-06-22T20:30:46+0000","dateFinished":"2020-06-22T20:30:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30291","title":"Run 1st query into in memory \"table\""},{"text":"%pyspark\nspark.sql (\"select * from filtered_truck_position\").show()","user":"admin","dateUpdated":"2020-06-22T20:55:43+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592859324780_-482097985","id":"20200622-205524_1408476996","dateCreated":"2020-06-22T20:55:24+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:32671","title":"Using Spark SQL to read from the in-memory \"table\""},{"text":"%sql\nselect * from filtered_truck_position\n","user":"admin","dateUpdated":"2020-06-22T20:30:48+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"timestamp":"string","truckId":"string","driverId":"string","routeId":"string","eventType":"string","latitude":"string","longitude":"string","correlationId":"string","eventTime":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"timestamp\ttruckId\tdriverId\trouteId\teventType\tlatitude\tlongitude\tcorrelationId\teventTime\n52445-08-27 17:04:32.0\t53\t10\t1384345811\tNormal\t38.31\t-91.07\t7880489281240118335\t2020-06-22 20:30:47.072\n52445-08-27 17:05:22.0\t77\t17\t1962261785\tNormal\t39.0\t-93.65\t7880489281240118335\t2020-06-22 20:30:47.121999\n52445-08-27 17:07:06.0\t19\t32\t1325562373\tNormal\t34.8\t-92.09\t7880489281240118335\t2020-06-22 20:30:47.225999\n52445-08-27 17:07:01.0\t35\t15\t1390372503\tNormal\t34.89\t-91.74\t7880489281240118335\t2020-06-22 20:30:47.221\n52445-08-27 17:08:32.0\t41\t21\t1594289134\tNormal\t37.16\t-94.46\t7880489281240118335\t2020-06-22 20:30:47.312\n52445-08-27 17:09:42.0\t87\t11\t160405074\tNormal\t41.87\t-87.67\t7880489281240118335\t2020-06-22 20:30:47.382\n52445-08-27 17:11:01.0\t89\t27\t160779139\tNormal\t38.99\t-93.45\t7880489281240118335\t2020-06-22 20:30:47.461\n52445-08-27 17:18:51.0\t58\t25\t160405074\tNormal\t38.43\t-90.35\t7880489281240118335\t2020-06-22 20:30:47.931\n52445-08-27 17:20:31.0\t55\t31\t1090292248\tNormal\t37.03\t-94.58\t7880489281240118335\t2020-06-22 20:30:48.031\n52445-08-27 17:22:42.0\t102\t14\t1090292248\tNormal\t37.03\t-94.58\t7880489281240118335\t2020-06-22 20:30:48.161999\n52445-08-27 17:23:01.0\t51\t19\t1565885487\tNormal\t36.19\t-96.21\t7880489281240118335\t2020-06-22 20:30:48.181\n"},{"type":"TEXT","data":""}]},"apps":[],"jobName":"paragraph_1592857542431_-826207858","id":"20200622-202542_97019300","dateCreated":"2020-06-22T20:25:42+0000","dateStarted":"2020-06-22T20:30:48+0000","dateFinished":"2020-06-22T20:30:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30292"},{"title":"Stop 1st query","text":"%pyspark\nquery1.stop()\n","user":"admin","dateUpdated":"2020-06-22T20:33:10+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592857580289_323423156","id":"20200622-202620_1601205694","dateCreated":"2020-06-22T20:26:20+0000","dateStarted":"2020-06-22T20:30:44+0000","dateFinished":"2020-06-22T20:30:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30293"},{"title":"Filter out normal events","text":"%pyspark\njsonDf.printSchema\njsonFilteredDf = jsonDf.where(\"json.eventType !='Normal'\")","user":"admin","dateUpdated":"2020-06-22T20:58:27+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592857974813_1876483814","id":"20200622-203254_241110670","dateCreated":"2020-06-22T20:32:54+0000","dateStarted":"2020-06-22T20:35:27+0000","dateFinished":"2020-06-22T20:35:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30294"},{"title":"Run 2nd query on filtered data into in memory \"table\"","text":"%pyspark\nquery2 = jsonFilteredDf.writeStream.format(\"memory\").queryName(\"filtered_truck_position2\").start()","user":"admin","dateUpdated":"2020-06-22T20:58:49+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1592857736444_1964024228","id":"20200622-202856_2109027923","dateCreated":"2020-06-22T20:28:56+0000","dateStarted":"2020-06-22T20:36:01+0000","dateFinished":"2020-06-22T20:36:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30295"},{"text":"%pyspark\nspark.sql (\"select * from filtered_truck_position2\").show()  ","user":"admin","dateUpdated":"2020-06-22T20:36:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------------------+-------+--------+---------+---------+--------+---------+-------------------+--------------------+\n|           timestamp|truckId|driverId|  routeId|eventType|latitude|longitude|      correlationId|           eventTime|\n+--------------------+-------+--------+---------+---------+--------+---------+-------------------+--------------------+\n|52445-08-31 15:09...|     87|      11|160405074|Overspeed|   41.72|   -91.63|7880489281240118335|2020-06-22 20:36:...|\n+--------------------+-------+--------+---------+---------+--------+---------+-------------------+--------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1592858111885_1779449523","id":"20200622-203511_418407583","dateCreated":"2020-06-22T20:35:11+0000","dateStarted":"2020-06-22T20:36:52+0000","dateFinished":"2020-06-22T20:36:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30296"},{"title":"Stop 2nd query","text":"%pyspark\nquery2.stop","user":"admin","dateUpdated":"2020-06-22T20:44:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<bound method StreamingQuery.stop of <pyspark.sql.streaming.StreamingQuery object at 0x7f7ee52dfa90>>\n"}]},"apps":[],"jobName":"paragraph_1592858174402_178358531","id":"20200622-203614_1310983284","dateCreated":"2020-06-22T20:36:14+0000","dateStarted":"2020-06-22T20:44:19+0000","dateFinished":"2020-06-22T20:44:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30297"},{"title":"Run 3rd query - Write non-normal events to Kafka topic","text":"%pyspark\nquery3 = jsonFilteredDf.selectExpr(\"to_json(struct(*)) AS value\").writeStream.format(\"kafka\").option(\"kafka.bootstrap.servers\", \"kafka-1:19092\").option(\"topic\",\"dangerous_driving_spark\").option(\"checkpointLocation\", \"/tmp\").start()    ","user":"admin","dateUpdated":"2020-06-22T21:00:13+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Py4JJavaError: An error occurred while calling o613.start.\n: java.lang.IllegalStateException: Cannot start query with id c340108b-149a-41eb-b6fe-2684a973623d as another query with same id is already active. Perhaps you are attempting to restart a query from checkpoint that is already active.\n\tat org.apache.spark.sql.streaming.StreamingQueryManager.startQuery(StreamingQueryManager.scala:345)\n\tat org.apache.spark.sql.streaming.DataStreamWriter.start(DataStreamWriter.scala:325)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)\n\tat py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)\n\tat py4j.Gateway.invoke(Gateway.java:282)\n\tat py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)\n\tat py4j.commands.CallCommand.execute(CallCommand.java:79)\n\tat py4j.GatewayConnection.run(GatewayConnection.java:238)\n\tat java.lang.Thread.run(Thread.java:748)\n\n(<class 'py4j.protocol.Py4JJavaError'>, Py4JJavaError('An error occurred while calling o613.start.\\n', JavaObject id=o614), <traceback object at 0x7f7ee594f460>)"}]},"apps":[],"jobName":"paragraph_1592858221788_751088376","id":"20200622-203701_36187863","dateCreated":"2020-06-22T20:37:01+0000","dateStarted":"2020-06-22T20:44:24+0000","dateFinished":"2020-06-22T20:44:25+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:30298"},{"text":"%pyspark\nquery3.stop","user":"admin","dateUpdated":"2020-06-22T21:00:52+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"<bound method StreamingQuery.stop of <pyspark.sql.streaming.StreamingQuery object at 0x7f7ee530a850>>\n"}]},"apps":[],"jobName":"paragraph_1592858410330_989520991","id":"20200622-204010_1187136938","dateCreated":"2020-06-22T20:40:10+0000","dateStarted":"2020-06-22T20:44:08+0000","dateFinished":"2020-06-22T20:44:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:30299","title":"Stop 3rd query"},{"title":"Retrieve static driver information","text":"%pyspark\nval opts = Map(\n  \"url\" -> \"jdbc:postgresql://postgresql/sample?user=sample&password=sample\",\n  \"driver\" -> \"org.postgresql.Driver\",\n  \"dbtable\" -> \"driver\")\ndriverRawDf = spark.read.format(\"jdbc\").options(opts).load()  \ndriverDf = driverRawDf.selectExpr(\"id as driverId\", \"first_name as firstName\", \"last_name as lastName\")\n","user":"admin","dateUpdated":"2020-06-22T21:01:17+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592858605983_481995852","id":"20200622-204325_568108351","dateCreated":"2020-06-22T20:43:25+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:30300"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2020-06-22T20:45:25+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1592858725267_-2111155290","id":"20200622-204525_1836273147","dateCreated":"2020-06-22T20:45:25+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:30301"}],"name":"Truck Sample - Python","id":"2FCFWEK6D","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}